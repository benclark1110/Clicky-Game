{"version":3,"sources":["logo.svg","components/NavBar/index.js","components/Jumbotron/index.js","components/Cards/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NavBar","props","react_default","a","createElement","className","currentScore","topScore","Jumbotron","ImageCard","onClick","clickCount","id","alt","name","src","image","clickedArr","App","state","characters","includes","alert","_this","setState","sort","Math","random","push","console","log","_this2","this","components_NavBar","components_Jumbotron","map","character","Cards","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"umCAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+OCevBC,MAZjB,SAAgBC,GACZ,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAd,eACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAd,4BACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAd,UAA4BJ,EAAMK,aAAlC,iBAA8DL,EAAMM,SAApE,cCIOC,MAVjB,WACI,OACIN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,MAAKC,UAAU,OAAf,gBACAH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,MAAKC,UAAU,OAAf,oFCQKI,MAbf,SAAmBR,GACjB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2CAA2CK,QAAS,kBAAMT,EAAMU,WAAWV,EAAMW,MAC9FV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAMC,UAAU,QACVQ,IAAKZ,EAAMa,KACXC,IAAKd,EAAMe,kBCDrBC,EAAa,GAqDFC,6MAjDbC,MAAQ,CACNC,aACAd,aAAc,EACdC,SAAU,KAGZI,WAAa,SAACC,GACPK,EAAWI,SAAST,IAOvBU,MAAM,wBACFC,EAAKJ,MAAMb,cAAgBiB,EAAKJ,MAAMZ,UACxCgB,EAAKC,SAAS,CAAEjB,SAAUgB,EAAKJ,MAAMb,eAEvCiB,EAAKC,SAAS,CAAElB,aAAc,IAC9BW,EAAa,GACbM,EAAKJ,MAAMC,WAAWK,KAAK,kBAAMC,KAAKC,SAAW,OAZjDV,EAAWW,KAAKhB,GAChBU,MAAM,QACNO,QAAQC,IAAIb,GACZM,EAAKC,SAAS,CAAElB,aAAciB,EAAKJ,MAAMb,aAAe,IACxDiB,EAAKJ,MAAMC,WAAWK,KAAK,kBAAMC,KAAKC,SAAW,+EAY5C,IAAAI,EAAAC,KACP,OACE9B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC6B,EAAD,CACE3B,aAAc0B,KAAKb,MAAMb,aACzBC,SAAUyB,KAAKb,MAAMZ,WAEvBL,EAAAC,EAAAC,cAAC8B,EAAD,MACAhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZ2B,KAAKb,MAAMC,WAAWe,IAAI,SAAAC,GAAS,OAClClC,EAAAC,EAAAC,cAACiC,EAAD,CACE1B,WAAYoB,EAAKpB,WACjBK,MAAOoB,EAAUpB,MACjBJ,GAAIwB,EAAUxB,GACd0B,IAAKF,EAAUxB,iBAzCb2B,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.79674108.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport \"./style.css\";\n\nfunction NavBar(props) {\n    return (\n      <div className=\"navbar testing\">\n        <div className=\"row\">\n          <h2 className=\"col\">Clicky Game</h2>\n          <h2 className=\"col\">Click an image to begin!</h2>\n          <h2 className=\"col\">Score: {props.currentScore} | Top Score: {props.topScore} </h2>\n        </div>\n      </div>\n    );\n  }\n  \n  export default NavBar;","import React from 'react';\nimport \"./style.css\";\n\nfunction Jumbotron() {\n    return (\n        <div className=\"header\">\n          <h2  className=\"row\">Clicky Game!</h2>\n          <br />\n          <h2  className=\"row\">Click on an image to earn points, but don't click on any more than once!</h2>\n        </div>\n    );\n  }\n  \n  export default Jumbotron;","import React from \"react\";\nimport \"./style.css\";\n\nfunction ImageCard(props) {\n  return (\n    <div className=\"card col-sm-6 col-md-3 col-lg-3 col-xl-3\" onClick={() => props.clickCount(props.id)}>\n      <div className=\"img-container\">\n        <img  className=\"image\" \n              alt={props.name} \n              src={props.image}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default ImageCard;","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport NavBar from \"./components/NavBar/index\";\nimport Jumbotron from \"./components/Jumbotron/index\";\nimport ImageCard from \"./components/Cards/index\";\nimport characters from \"./characters.json\";\n\nlet clickedArr = []\n\nclass App extends Component {\n\n  state = {\n    characters,\n    currentScore: 0,\n    topScore: 0,\n  };\n\n  clickCount = (id) => {\n    if (!clickedArr.includes(id)) {\n      clickedArr.push(id);\n      alert(\"nice\");\n      console.log(clickedArr);\n      this.setState({ currentScore: this.state.currentScore + 1 });\n      this.state.characters.sort(() => Math.random() - 0.5);\n    } else {\n      alert(\"already clicked them\");\n      if (this.state.currentScore >= this.state.topScore) {\n        this.setState({ topScore: this.state.currentScore});\n      }\n      this.setState({ currentScore: 0 });\n      clickedArr = []\n      this.state.characters.sort(() => Math.random() - 0.5);\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <NavBar \n          currentScore={this.state.currentScore}\n          topScore={this.state.topScore}\n        />\n        <Jumbotron />\n        <div className=\"container\">\n          <div className=\"row\">\n            {this.state.characters.map(character => \n              <ImageCard\n                clickCount={this.clickCount}\n                image={character.image}\n                id={character.id}\n                key={character.id}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}